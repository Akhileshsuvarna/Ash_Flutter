name: "Build & Release"
on:
  release:
    types: [published]
  # pull_request:
  #   branches:
  #     - master
  push:
    branches:
      - code-refactor
jobs:
  build-android:
    name: Test, Build & upload aab
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: code-refactor
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.2'
          channel: 'stable'
      - name: Get Flutter Pub
        run: flutter pub get
      - name: Decoding android/key.properties
        run: echo "${{ secrets.KEYPROP_PROD }}" | base64 --decode > android/key.properties
      - name: Decoding android/neumodore_key.jks
        run: echo "${{ secrets.KEYJKS_PROD }}" | base64 --decode > android/app/upload-keystore.jks
      - name: Build app bundle
        run: flutter build appbundle --release
      - name: upload aab to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: app-release-aab
          path: 'build/app/outputs/bundle/release/app-release.aab'
      - name: upload mapping file to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: android-mapping
          path: 'build/app/outputs/mapping/release/mapping.txt'
  build-ios:
    name: Build IOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: code-refactor
      - name: add java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.2'
          channel: 'stable'
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: install pbxproj
        run: pip install pbxproj
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          P12_PASSWORD=""
          # import certificate and provisioning profile from secrets                                                                                                              
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$MOBILEPROVISION_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Get Flutter Pub
        run: flutter pub get
      - name: Restore Pods cache
        uses: actions/cache@v2
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install Pods
        run: cd ios && pod install --repo-update && cd ..
      - name: setup for Manul code sign
        run: python code_sign.py ${{ secrets.TEAM_ID }} ${{ secrets.APPSTORE_ISSUER_ID }} ${{ secrets.MOBILEPROVISION_NAME }}
      - name: update export options for manual provisioning
        run:  /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles:com.livvinyl.healthconnector.app string ${{ secrets.MOBILEPROVISION_NAME }}' ios/export-options.plist
      - name: create ipa
        run: flutter build ipa --export-options-plist=ios/export-options.plist --release $ARGS
        env:
          GIT_COMMIT_DATE: $(git log -n1 --date=short --format="%ad")
          GIT_COMMIT_HASH: $(git log -n1 --date=short --format="%h")
          FLUTTER_VERSION: ${$(flutter --version):8:6}
          ARGS: "--dart-define=GIT_COMMIT_DATE=$GIT_COMMIT_DATE --dart-define=GIT_COMMIT_HASH=$GIT_COMMIT_HASH --dart-define=FLUTTER_VERSION=${FLUTTER_VERSION}"
      - name: upload ipa
        uses: actions/upload-artifact@v3
        with:
          name: ipa-production-release
          path: ./build/ios/ipa/app.ipa
  upload_testflight:
    name: TestFlight upload
    needs: build-ios
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: code-refactor
      - name: Download ipa
        uses: actions/download-artifact@v1
        with:
          name: ipa-production-release
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ./ipa-production-release/app.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  upload_playstore:
    name: PlayStore upload
    needs: [build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: code-refactor
      - name: Download app bundle from artifacts
        uses: actions/download-artifact@v1
        with:
          name: app-release-aab
      - name: Download android mapping from artifacts
        uses: actions/download-artifact@v1
        with:
          name: android-mapping
      - name: Upload app to PlayStore
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: com.livvinyl.healthconnector.app
          releaseFiles: ./app-release-aab/app-release.aab
          track: internal
          inAppUpdatePriority: 5
          userFraction: 1.0
          # whatsNewDirectory: whatsNewDirectory/whatsnew
          mappingFile: android-mapping/mapping.txt

  # release:
  #   name: release
  #   needs: [upload_testflight]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: master
  #     - name: Download ipa
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: ipa-production-release
  #     - name: Push to Releases
  #       uses: ncipollo/release-action@v1
  #       with:
  #         allowUpdates: true
  #         artifacts: "./ipa-production-release/app.ipa"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  # slackNotification:
  #       name: Slack Notification
  #       needs: [upload_testflight]
  #       runs-on: ubuntu-latest
  #       steps:
  #       - uses: actions/checkout@v2
  #       - name: Slack Notification
  #         uses: rtCamp/action-slack-notify@v2
  #         env:
  #           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #           SLACK_USERNAME: Production release
  #           SLACK_COLOR: ${{ job.status }}
  #           SLACK_ICON: https://firebasestorage.googleapis.com/v0/b/livvinyl-health-connector.appspot.com/o/logo.png?alt=media&token=370f338d-c0da-48a4-8a47-2dd1c5aac75d
  #           SLACK_FOOTER: Powered by Livvinyl Inc
  #           SLACK_MESSAGE: 'New Release for Android & IOS is Available for Testing Link-Android: https://play.google.com/apps/internaltest/4701654924397076080 Link-IOS: https://testflight.apple.com/join/Dmpagn2y'
            